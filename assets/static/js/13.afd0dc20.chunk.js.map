{"version":3,"sources":["component/Share/ReadMe.js"],"names":["useStyles","makeStyles","theme","readMeContainer","marginTop","breakpoints","down","spacing","readMeHeader","padding","display","color","palette","text","secondary","readMeIcon","marginRight","content","border","height","borderTopLeftRadius","borderTopRightRadius","backgroundColor","background","paper","primary","default","type","ReadMe","props","t","useTranslation","classes","useTheme","useState","loading","setLoading","setContent","dispatch","useDispatch","ToggleSnackbar","useCallback","vertical","horizontal","msg","toggleSnackbar","$vm","React","createRef","useEffect","previewPath","file","path","name","API","get","share","key","encodeURIComponent","then","response","rawData","toString","catch","error","message","className","ref","style","boxShadow","borderRadius","value","onChange","preview","toolbar"],"mappings":"iUAaMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,gBAAgB,aACZC,UAAW,IACVF,EAAMG,YAAYC,KAAK,MAAQ,CAC5BF,UAAWF,EAAMK,QAAQ,KAGjCC,aAAc,CACVC,QAAS,YACTC,QAAS,OACTC,MAAOT,EAAMU,QAAQC,KAAKC,WAE9BC,WAAY,CACRC,YAAa,GAEjBC,QAAS,GACT,UAAW,CAEP,iBAAkB,CACdC,OAAQ,kBAEZ,8CAA+C,CAC3CC,OAAQ,eAEZ,mCAAoC,CAChCC,oBAAqB,cACrBC,qBAAsB,eAE1B,qDAAsD,CAClDC,gBAAiBpB,EAAMU,QAAQW,WAAWC,MAAQ,aAClDb,MAAOT,EAAMU,QAAQC,KAAKY,QAAU,cAExC,2CAA4C,CACxCH,gBAAiBpB,EAAMU,QAAQW,WAAWG,QAAU,aACpDf,MAC2B,SAAvBT,EAAMU,QAAQe,KACR,kBACA,kCAGd,4CAA6C,CACzCL,gBAAiBpB,EAAMU,QAAQW,WAAWG,QAAU,cAExD,yCAA0C,CACtCf,MAC2B,SAAvBT,EAAMU,QAAQe,KACR,qBACA,sBAEd,gDAAiD,CAC7CL,gBAAiBpB,EAAMU,QAAQW,WAAWG,QAAU,mBAKjD,SAASE,EAAOC,GAC3B,IAAQC,EAAMC,cAAND,EACFE,EAAUhC,IACVE,EAAQ+B,cAEd,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOjB,EAAP,KAAgBoB,EAAhB,KAEMC,EAAWC,cACXC,EAAiBC,uBACnB,SAACC,EAAUC,EAAYC,EAAKjC,GAA5B,OACI2B,EAASO,YAAeH,EAAUC,EAAYC,EAAKjC,MACvD,CAAC2B,IAGCQ,EAAMC,IAAMC,YA+BlB,OA7BAC,qBAAU,WACNb,GAAW,GACX,IAAMc,EACkB,MAApBrB,EAAMsB,KAAKC,KACLvB,EAAMsB,KAAKC,KAAOvB,EAAMsB,KAAKE,KAC7BxB,EAAMsB,KAAKC,KAAO,IAAMvB,EAAMsB,KAAKE,KAC7CC,IAAIC,IACA,iBACI1B,EAAM2B,MAAMC,IACZ,SACAC,mBAAmBR,IAEtBS,MAAK,SAACC,GACHvB,EAAWuB,EAASC,QAAQC,eAE/BC,OAAM,SAACC,GACJxB,EACI,MACA,QACAV,EAAE,oBAAqB,CAAEc,IAAKoB,EAAMC,UACpC,YAGPN,MAAK,WACFvB,GAAW,QAGpB,CAACP,EAAM2B,MAAO3B,EAAMsB,OAGnB,kBAAC,IAAD,CAAOe,UAAWlC,EAAQ7B,iBACtB,yBAAK+D,UAAWlC,EAAQxB,cACpB,kBAAC,IAAD,CAAU0D,UAAWlC,EAAQjB,aAC7B,kBAAC,IAAD,KAAac,EAAMsB,KAAKE,OAG5B,kBAAC,IAAD,MACA,yBAAKa,UAAWlC,EAAQf,SACnBkB,GAAW,kBAAC,IAAD,OACVA,GACE,kBAAC,IAAD,CACIgC,IAAKrB,EACLsB,MAAO,CACHC,UAAW,OACXC,aAAc,EACdhD,gBAAiBpB,EAAMU,QAAQW,WAAWC,OAE9CL,OAAQ,OACRoD,MAAOtD,EACPuD,SAAU,SAACD,GAAD,OAAWlC,EAAWkC,IAChCE,SAAO,EACPC,QAAS","file":"static/js/13.afd0dc20.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { MenuBook } from \"@material-ui/icons\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextLoading from \"../Placeholder/TextLoading\";\r\nimport API from \"../../middleware/Api\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Editor from \"for-editor\";\r\nimport { toggleSnackbar } from \"../../redux/explorer\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    readMeContainer: {\r\n        marginTop: 30,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n    readMeHeader: {\r\n        padding: \"10px 16px\",\r\n        display: \"flex\",\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    readMeIcon: {\r\n        marginRight: 8,\r\n    },\r\n    content: {},\r\n    \"@global\": {\r\n        //如果嵌套主题，则应该定位[class * =“MuiButton-root”]。\r\n        \".for-container\": {\r\n            border: \"none!important\",\r\n        },\r\n        \".for-container .for-editor .for-editor-edit\": {\r\n            height: \"0!important\",\r\n        },\r\n        \".for-container > div:first-child\": {\r\n            borderTopLeftRadius: \"0!important\",\r\n            borderTopRightRadius: \"0!important\",\r\n        },\r\n        \".for-container .for-editor .for-panel .for-preview\": {\r\n            backgroundColor: theme.palette.background.paper + \"!important\",\r\n            color: theme.palette.text.primary + \"!important\",\r\n        },\r\n        \".for-container .for-markdown-preview pre\": {\r\n            backgroundColor: theme.palette.background.default + \"!important\",\r\n            color:\r\n                theme.palette.type === \"dark\"\r\n                    ? \"#fff !important\"\r\n                    : \"rgba(0, 0, 0, 0.87);!important\",\r\n        },\r\n\r\n        \".for-container .for-markdown-preview code\": {\r\n            backgroundColor: theme.palette.background.default + \"!important\",\r\n        },\r\n        \".for-container .for-markdown-preview a\": {\r\n            color:\r\n                theme.palette.type === \"dark\"\r\n                    ? \"#67aeff !important\"\r\n                    : \"#0366d6 !important\",\r\n        },\r\n        \".for-container .for-markdown-preview table th\": {\r\n            backgroundColor: theme.palette.background.default + \"!important\",\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function ReadMe(props) {\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    const ToggleSnackbar = useCallback(\r\n        (vertical, horizontal, msg, color) =>\r\n            dispatch(toggleSnackbar(vertical, horizontal, msg, color)),\r\n        [dispatch]\r\n    );\r\n\r\n    const $vm = React.createRef();\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        const previewPath =\r\n            props.file.path === \"/\"\r\n                ? props.file.path + props.file.name\r\n                : props.file.path + \"/\" + props.file.name;\r\n        API.get(\r\n            \"/share/readme/\" +\r\n                props.share.key +\r\n                \"?path=\" +\r\n                encodeURIComponent(previewPath)\r\n        )\r\n            .then((response) => {\r\n                setContent(response.rawData.toString());\r\n            })\r\n            .catch((error) => {\r\n                ToggleSnackbar(\r\n                    \"top\",\r\n                    \"right\",\r\n                    t(\"share.readmeError\", { msg: error.message }),\r\n                    \"error\"\r\n                );\r\n            })\r\n            .then(() => {\r\n                setLoading(false);\r\n            });\r\n        // eslint-disable-next-line\r\n    }, [props.share, props.file]);\r\n\r\n    return (\r\n        <Paper className={classes.readMeContainer}>\r\n            <div className={classes.readMeHeader}>\r\n                <MenuBook className={classes.readMeIcon} />\r\n                <Typography>{props.file.name}</Typography>\r\n            </div>\r\n\r\n            <Divider />\r\n            <div className={classes.content}>\r\n                {loading && <TextLoading />}\r\n                {!loading && (\r\n                    <Editor\r\n                        ref={$vm}\r\n                        style={{\r\n                            boxShadow: \"none\",\r\n                            borderRadius: 4,\r\n                            backgroundColor: theme.palette.background.paper,\r\n                        }}\r\n                        height={\"100%\"}\r\n                        value={content}\r\n                        onChange={(value) => setContent(value)}\r\n                        preview\r\n                        toolbar={{}}\r\n                    />\r\n                )}\r\n            </div>\r\n        </Paper>\r\n    );\r\n}\r\n"],"sourceRoot":""}