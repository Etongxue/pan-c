{"version":3,"sources":["component/Modals/AddTag.js"],"names":["useStyles","makeStyles","theme","contentFix","padding","wrapper","margin","spacing","position","buttonProgress","color","palette","secondary","light","top","left","marginTop","marginLeft","content","display","textField","scroll","overflowX","dialogContent","pathSelect","icons","Circle","CircleOutline","Heart","HeartOutline","Hexagon","HexagonOutline","Hexagram","HexagramOutline","Rhombus","RhombusOutline","Square","SquareOutline","Triangle","AddTag","props","useTheme","t","useTranslation","React","useState","value","setValue","loading","setLoading","alignment","setAlignment","text","setColor","filename","tagName","path","input","setInput","pathSelectDialog","setPathSelectDialog","selectedPath","setSelectedPath","setSelectedPathName","handleInputChange","name","event","target","dispatch","useDispatch","ToggleSnackbar","useCallback","vertical","horizontal","msg","toggleSnackbar","classes","open","onClose","aria-labelledby","fullWidth","id","presentPath","selected","onSelect","folder","onClick","disabled","onChange","newValue","variant","aria-label","label","className","multiline","i18nKey","key","size","exclusive","newAlignment","Object","keys","map","index","style","alignSelf","API","post","expression","icon","then","response","onSuccess","type","data","catch","error","message"],"mappings":"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","file":"static/js/12.d1a0ba4b.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    makeStyles,\r\n    useTheme,\r\n} from \"@material-ui/core\";\r\nimport PathSelector from \"../FileManager/PathSelector\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport API from \"../../middleware/Api\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport {\r\n    Circle,\r\n    CircleOutline,\r\n    Heart,\r\n    HeartOutline,\r\n    Hexagon,\r\n    HexagonOutline,\r\n    Hexagram,\r\n    HexagramOutline,\r\n    Rhombus,\r\n    RhombusOutline,\r\n    Square,\r\n    SquareOutline,\r\n    Triangle,\r\n} from \"mdi-material-ui\";\r\nimport { toggleSnackbar } from \"../../redux/explorer\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    contentFix: {\r\n        padding: \"10px 24px 0px 24px\",\r\n    },\r\n    wrapper: {\r\n        margin: theme.spacing(1),\r\n        position: \"relative\",\r\n    },\r\n    buttonProgress: {\r\n        color: theme.palette.secondary.light,\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    content: {\r\n        padding: 0,\r\n        marginTop: 0,\r\n    },\r\n    marginTop: {\r\n        marginTop: theme.spacing(2),\r\n        display: \"block\",\r\n    },\r\n    textField: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    scroll: {\r\n        overflowX: \"auto\",\r\n    },\r\n    dialogContent: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    pathSelect: {\r\n        marginTop: theme.spacing(2),\r\n        display: \"flex\",\r\n    },\r\n}));\r\n\r\nconst icons = {\r\n    Circle: <Circle />,\r\n    CircleOutline: <CircleOutline />,\r\n    Heart: <Heart />,\r\n    HeartOutline: <HeartOutline />,\r\n    Hexagon: <Hexagon />,\r\n    HexagonOutline: <HexagonOutline />,\r\n    Hexagram: <Hexagram />,\r\n    HexagramOutline: <HexagramOutline />,\r\n    Rhombus: <Rhombus />,\r\n    RhombusOutline: <RhombusOutline />,\r\n    Square: <Square />,\r\n    SquareOutline: <SquareOutline />,\r\n    Triangle: <Triangle />,\r\n};\r\n\r\nexport default function AddTag(props) {\r\n    const theme = useTheme();\r\n    const { t } = useTranslation();\r\n\r\n    const [value, setValue] = React.useState(0);\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [alignment, setAlignment] = React.useState(\"Circle\");\r\n    const [color, setColor] = React.useState(theme.palette.text.secondary);\r\n    const [input, setInput] = React.useState({\r\n        filename: \"\",\r\n        tagName: \"\",\r\n        path: \"/\",\r\n    });\r\n    const [pathSelectDialog, setPathSelectDialog] = React.useState(false);\r\n    const [selectedPath, setSelectedPath] = useState(\"\");\r\n    // eslint-disable-next-line\r\n    const [selectedPathName, setSelectedPathName] = useState(\"\");\r\n    const setMoveTarget = (folder) => {\r\n        const path =\r\n            folder.path === \"/\"\r\n                ? folder.path + folder.name\r\n                : folder.path + \"/\" + folder.name;\r\n        setSelectedPath(path);\r\n        setSelectedPathName(folder.name);\r\n    };\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleIconChange = (event, newAlignment) => {\r\n        if (newAlignment) {\r\n            setAlignment(newAlignment);\r\n        }\r\n    };\r\n\r\n    const handleColorChange = (event, newAlignment) => {\r\n        if (newAlignment) {\r\n            setColor(newAlignment);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (name) => (event) => {\r\n        setInput({\r\n            ...input,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    const dispatch = useDispatch();\r\n    const ToggleSnackbar = useCallback(\r\n        (vertical, horizontal, msg, color) =>\r\n            dispatch(toggleSnackbar(vertical, horizontal, msg, color)),\r\n        [dispatch]\r\n    );\r\n\r\n    const submitNewLink = () => {\r\n        setLoading(true);\r\n\r\n        API.post(\"/tag/link\", {\r\n            path: input.path,\r\n            name: input.tagName,\r\n        })\r\n            .then((response) => {\r\n                setLoading(false);\r\n                props.onClose();\r\n                props.onSuccess({\r\n                    type: 1,\r\n                    name: input.tagName,\r\n                    expression: input.path,\r\n                    color: theme.palette.text.secondary,\r\n                    icon: \"FolderHeartOutline\",\r\n                    id: response.data,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                ToggleSnackbar(\"top\", \"right\", error.message, \"error\");\r\n            })\r\n            .then(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n\r\n    const submitNewTag = () => {\r\n        setLoading(true);\r\n\r\n        API.post(\"/tag/filter\", {\r\n            expression: input.filename,\r\n            name: input.tagName,\r\n            color: color,\r\n            icon: alignment,\r\n        })\r\n            .then((response) => {\r\n                setLoading(false);\r\n                props.onClose();\r\n                props.onSuccess({\r\n                    type: 0,\r\n                    name: input.tagName,\r\n                    color: color,\r\n                    icon: alignment,\r\n                    id: response.data,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                ToggleSnackbar(\"top\", \"right\", error.message, \"error\");\r\n            })\r\n            .then(() => {\r\n                setLoading(false);\r\n            });\r\n    };\r\n    const submit = () => {\r\n        if (value === 0) {\r\n            submitNewTag();\r\n        } else {\r\n            submitNewLink();\r\n        }\r\n    };\r\n    const selectPath = () => {\r\n        setInput({\r\n            ...input,\r\n            path: selectedPath === \"//\" ? \"/\" : selectedPath,\r\n        });\r\n        setPathSelectDialog(false);\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.open}\r\n            onClose={props.onClose}\r\n            aria-labelledby=\"form-dialog-title\"\r\n            fullWidth\r\n        >\r\n            <Dialog\r\n                open={pathSelectDialog}\r\n                onClose={() => setPathSelectDialog(false)}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    {t(\"navbar.addTagDialog.selectFolder\")}\r\n                </DialogTitle>\r\n                <PathSelector\r\n                    presentPath=\"/\"\r\n                    selected={[]}\r\n                    onSelect={setMoveTarget}\r\n                />\r\n\r\n                <DialogActions>\r\n                    <Button onClick={() => setPathSelectDialog(false)}>\r\n                        {t(\"common:cancel\")}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={selectPath}\r\n                        color=\"primary\"\r\n                        disabled={selectedPath === \"\"}\r\n                    >\r\n                        {t(\"common:ok\")}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <AppBar position=\"static\">\r\n                <Tabs\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    variant=\"fullWidth\"\r\n                    aria-label=\"full width tabs example\"\r\n                >\r\n                    <Tab label={t(\"navbar.addTagDialog.fileSelector\")} />\r\n                    <Tab label={t(\"navbar.addTagDialog.folderLink\")} />\r\n                </Tabs>\r\n            </AppBar>\r\n            {value === 0 && (\r\n                <DialogContent className={classes.dialogContent}>\r\n                    <TextField\r\n                        label={t(\"navbar.addTagDialog.tagName\")}\r\n                        id=\"filled-name\"\r\n                        value={input[\"tagName\"]}\r\n                        onChange={handleInputChange(\"tagName\")}\r\n                        fullWidth\r\n                        className={classes.textField}\r\n                    />\r\n                    <TextField\r\n                        id=\"filled-name\"\r\n                        label={t(\"navbar.addTagDialog.matchPattern\")}\r\n                        value={input[\"filename\"]}\r\n                        onChange={handleInputChange(\"filename\")}\r\n                        fullWidth\r\n                        multiline\r\n                        className={classes.textField}\r\n                    />\r\n                    <Typography variant=\"caption\" color={\"textSecondary\"}>\r\n                        <Trans i18nKey=\"navbar.addTagDialog.matchPatternDescription\">\r\n                            {[<code key={0} />, <code key={1} />]}\r\n                        </Trans>\r\n                    </Typography>\r\n                    <FormLabel className={classes.marginTop}>\r\n                        {t(\"navbar.addTagDialog.icon\")}\r\n                    </FormLabel>\r\n                    <div className={classes.scroll}>\r\n                        <ToggleButtonGroup\r\n                            size=\"small\"\r\n                            value={alignment}\r\n                            exclusive\r\n                            onChange={handleIconChange}\r\n                            className={classes.textField}\r\n                        >\r\n                            {Object.keys(icons).map((key, index) => (\r\n                                <ToggleButton key={index} value={key}>\r\n                                    {icons[key]}\r\n                                </ToggleButton>\r\n                            ))}\r\n                        </ToggleButtonGroup>\r\n                    </div>\r\n                    <FormLabel className={classes.marginTop}>\r\n                        {t(\"navbar.addTagDialog.color\")}\r\n                    </FormLabel>\r\n                    <div className={classes.scroll}>\r\n                        <ToggleButtonGroup\r\n                            size=\"small\"\r\n                            value={color}\r\n                            exclusive\r\n                            onChange={handleColorChange}\r\n                            className={classes.textField}\r\n                        >\r\n                            {[\r\n                                theme.palette.text.secondary,\r\n                                \"#f44336\",\r\n                                \"#e91e63\",\r\n                                \"#9c27b0\",\r\n                                \"#673ab7\",\r\n                                \"#3f51b5\",\r\n                                \"#2196f3\",\r\n                                \"#03a9f4\",\r\n                                \"#00bcd4\",\r\n                                \"#009688\",\r\n                                \"#4caf50\",\r\n                                \"#cddc39\",\r\n                                \"#ffeb3b\",\r\n                                \"#ffc107\",\r\n                                \"#ff9800\",\r\n                                \"#ff5722\",\r\n                                \"#795548\",\r\n                                \"#9e9e9e\",\r\n                                \"#607d8b\",\r\n                            ].map((key, index) => (\r\n                                <ToggleButton key={index} value={key}>\r\n                                    <Circle style={{ color: key }} />\r\n                                </ToggleButton>\r\n                            ))}\r\n                        </ToggleButtonGroup>\r\n                    </div>\r\n                </DialogContent>\r\n            )}\r\n            {value === 1 && (\r\n                <DialogContent className={classes.dialogContent}>\r\n                    <TextField\r\n                        label={t(\"navbar.addTagDialog.tagName\")}\r\n                        id=\"filled-name\"\r\n                        value={input[\"tagName\"]}\r\n                        onChange={handleInputChange(\"tagName\")}\r\n                        fullWidth\r\n                        className={classes.textField}\r\n                    />\r\n                    <div className={classes.pathSelect}>\r\n                        <TextField\r\n                            label={t(\"navbar.addTagDialog.folderPath\")}\r\n                            id=\"filled-name\"\r\n                            value={input[\"path\"]}\r\n                            onChange={handleInputChange(\"path\")}\r\n                            fullWidth\r\n                            className={classes.textField}\r\n                        />\r\n                        <Button\r\n                            onClick={() => setPathSelectDialog(true)}\r\n                            style={{\r\n                                marginLeft: theme.spacing(1),\r\n                                alignSelf: \"flex-end\",\r\n                            }}\r\n                            color=\"primary\"\r\n                            variant=\"outlined\"\r\n                        >\r\n                            {t(\"common:select\")}\r\n                        </Button>\r\n                    </div>\r\n                </DialogContent>\r\n            )}\r\n            <DialogActions>\r\n                <Button onClick={props.onClose}>{t(\"common:cancel\")}</Button>\r\n                <div className={classes.wrapper}>\r\n                    <Button\r\n                        onClick={submit}\r\n                        color=\"primary\"\r\n                        disabled={\r\n                            loading ||\r\n                            (value === 0 &&\r\n                                (input.filename === \"\" ||\r\n                                    input.tagName === \"\")) ||\r\n                            (value === 1 &&\r\n                                (input.tagName === \"\" || input.path === \"\"))\r\n                        }\r\n                    >\r\n                        {t(\"common:ok\")}\r\n                        {loading && (\r\n                            <CircularProgress\r\n                                size={24}\r\n                                className={classes.buttonProgress}\r\n                            />\r\n                        )}\r\n                    </Button>\r\n                </div>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n"],"sourceRoot":""}